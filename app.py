import os
from flask import Flask, render_template, request, jsonify, session, Response
from hakoiri_puzzle import HakoiriPuzzle, HakoiriSolver, PIECE_PROPERTIES
import json
import threading
import time
import queue
import uuid

app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'dev-key-change-in-production')

<<<<<<< HEAD
# „Ç∞„É≠„Éº„Éê„É´ÈÄ≤Êçó„Ç≠„É•„Éº„Å®Ëß£ÁµêÊûú‰øùÂ≠ò
=======
# „Ç∞„É≠„Éº„Éê„É´ÈÄ≤Êçó„Ç≠„É•„Éº„Å®Ëß£ÁµêÊûú‰øùÂ≠ÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
progress_queues = {}
solution_cache = {}
stop_flags = {}  # Êé¢Á¥¢‰∏≠Ê≠¢„Éï„É©„Ç∞

@app.route('/')
def index():
<<<<<<< HEAD
    """„É°„Ç§„É≥„Éö„Éº„Ç∏„ÇíË°®Á§∫"""
=======
    """„É°„Ç§„É≥„Éö„ÅE„Ç∏„ÇíË°®Á§∫"""
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    return render_template('index.html')

@app.route('/api/initialize', methods=['POST'])
def initialize_puzzle():
<<<<<<< HEAD
    """„Éë„Ç∫„É´„ÇíÂàùÊúüÂåñ"""
=======
    """„Éë„Ç∫„É´„ÇíÂÅEÊúüÂåñ"""
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    data = request.get_json()
    board = data.get('board')
    
    puzzle = HakoiriPuzzle()
    if board:
        puzzle.set_initial_board(board)
    
<<<<<<< HEAD
    # „Çª„ÉÉ„Ç∑„Éß„É≥„Å´„Éë„Ç∫„É´„ÅÆÂàùÊúüÁä∂ÊÖã„Çí‰øùÂ≠ò
=======
    # „Çª„ÉÅEÇ∑„Éß„É≥„Å´„Éë„Ç∫„É´„ÅÆÂàùÊúüÁä∂ÊÖã„Çí‰øùÂ≠ÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    session['initial_board'] = puzzle.initial_board
    session['current_step'] = 0
    session['solution'] = None
    
    return jsonify({
        'success': True,
        'board': puzzle.initial_board,
        'piece_properties': PIECE_PROPERTIES
    })

def create_progress_callback(session_id):
<<<<<<< HEAD
    """ÈÄ≤Êçó„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞„Çí‰ΩúÊàê"""
=======
    """ÈÄ≤Êçó„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞„Çí‰ΩúÊÅE"""
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    def progress_callback(info):
        if session_id in progress_queues:
            try:
                progress_queues[session_id].put_nowait(info)
            except queue.Full:
<<<<<<< HEAD
                # „Ç≠„É•„Éº„ÅåÊ∫ÄÊùØ„ÅÆÂ†¥Âêà„ÅØÂè§„ÅÑ„Éá„Éº„Çø„Çí1„Å§ÂâäÈô§„Åó„Å¶„Åã„ÇâËøΩÂä†
=======
                # „Ç≠„É•„Éº„ÅåÊ∫ÄÊùØ„ÅÆÂ†¥Âêà„ÅEÂè§„ÅÅEÉá„Éº„Çø„ÇÅE„Å§ÂâäÈô§„Åó„Å¶„Åã„ÇâËøΩÂä†
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
                try:
                    progress_queues[session_id].get_nowait()
                    progress_queues[session_id].put_nowait(info)
                except queue.Empty:
                    pass
    return progress_callback

@app.route('/api/solve', methods=['POST'])
def solve_puzzle():
<<<<<<< HEAD
    """„Éë„Ç∫„É´„ÇíËß£„ÅèÔºà„É™„Ç¢„É´„Çø„Ç§„É†ÈÄ≤ÊçóË°®Á§∫‰ªò„ÅçÔºâ"""
    if 'initial_board' not in session:
        return jsonify({'success': False, 'error': '„Éë„Ç∫„É´„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'})
    
    # „É¶„Éã„Éº„ÇØ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥ID„ÇíÁîüÊàê
=======
    """„Éë„Ç∫„É´„ÇíËß£„ÅèÔºà„É™„Ç¢„É´„Çø„Ç§„É†ÈÄ≤ÊçóË°®Á§∫‰ªò„ÅçÅEÅE""
    if 'initial_board' not in session:
        return jsonify({'success': False, 'error': '„Éë„Ç∫„É´„ÅåÂÅEÊúüÂåñ„Åï„Çå„Å¶„ÅÅEÅæ„Åõ„Çì'})
    
    # „É¶„Éã„ÅE„ÇØ„Å™„Çª„ÉÅEÇ∑„Éß„É≥ID„ÇíÁîüÊàÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    session_id = str(uuid.uuid4())
    session['task_id'] = session_id
    progress_queues[session_id] = queue.Queue(maxsize=50)
    stop_flags[session_id] = False
    
<<<<<<< HEAD
    # ÂàùÊúüÁõ§Èù¢„Çí„Ç≥„Éî„ÉºÔºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Çπ„É¨„ÉÉ„ÉâÁî®Ôºâ
=======
    # ÂàùÊúüÁõ§Èù¢„Çí„Ç≥„Éî„ÅEÅEà„Éê„ÉÅEÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Çπ„É¨„ÉÅEÉâÁî®ÅEÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    initial_board = [row[:] for row in session['initial_board']]
    
    puzzle = HakoiriPuzzle()
    puzzle.set_initial_board(initial_board)
    
    solver = HakoiriSolver(puzzle)
    solver.set_progress_callback(create_progress_callback(session_id))
    
<<<<<<< HEAD
    # ‰∏≠Ê≠¢„Éï„É©„Ç∞„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞„Çí„ÇΩ„É´„Éê„Éº„Å´Ë®≠ÂÆö
=======
    # ‰∏≠Ê≠¢„Éï„É©„Ç∞„ÉÅ„Çß„ÉÅEÇØÈñ¢Êï∞„Çí„ÇΩ„É´„Éê„ÅE„Å´Ë®≠ÂÆÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    solver.set_stop_flag_function(lambda: stop_flags.get(session_id, False))
    
    def solve_in_background():
        try:
            solution = solver.solve_astar()
            
            if solution:
<<<<<<< HEAD
                # Ëß£„Çí„Ç∞„É≠„Éº„Éê„É´„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò
=======
                # Ëß£„Çí„Ç∞„É≠„Éº„Éê„É´„Ç≠„É£„ÉÅEÇ∑„É•„Å´‰øùÂ≠ÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
                solution_data = [{'board': state.board, 'move': state.move} for state in solution]
                solution_cache[session_id] = {
                    'solution': solution_data,
                    'current_step': 0
                }
                
                # ÊúÄÁµÇÁµêÊûú„ÇíÈÄ≤Êçó„Ç≠„É•„Éº„Å´ËøΩÂä†
                final_result = {
                    'type': 'final_result',
                    'success': True,
                    'total_steps': len(solution) - 1,
                    'total_explored': getattr(solver, 'total_explored', 0)
                }
            else:
                final_result = {
                    'type': 'final_result',
                    'success': False,
                    'total_explored': getattr(solver, 'total_explored', 0)
                }
                
<<<<<<< HEAD
            # ÂÆâÂÖ®„Å´„Ç≠„É•„Éº„Å´ËøΩÂä†
=======
            # ÂÆâÂÅE„Å´„Ç≠„É•„Éº„Å´ËøΩÂä†
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
            if session_id in progress_queues:
                try:
                    progress_queues[session_id].put_nowait(final_result)
                except queue.Full:
                    try:
                        progress_queues[session_id].get_nowait()
                        progress_queues[session_id].put_nowait(final_result)
                    except queue.Empty:
                        pass
                        
        except Exception as e:
            error_result = {
                'type': 'final_result',
                'success': False,
                'error': f'Ëß£Ê±∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {str(e)}'
            }
            if session_id in progress_queues:
                try:
                    progress_queues[session_id].put_nowait(error_result)
                except queue.Full:
                    try:
                        progress_queues[session_id].get_nowait()
                        progress_queues[session_id].put_nowait(error_result)
                    except queue.Empty:
                        pass
    
    # „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßËß£„ÇíÊé¢Á¥¢
    thread = threading.Thread(target=solve_in_background)
    thread.daemon = True
    thread.start()
    
    return jsonify({
        'success': True,
        'message': 'Ëß£Êé¢Á¥¢„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü',
        'session_id': session_id
    })

@app.route('/api/stop', methods=['POST'])
def stop_solving():
    """Êé¢Á¥¢„Çí‰∏≠Ê≠¢"""
    task_id = session.get('task_id')
    if task_id and task_id in stop_flags:
        stop_flags[task_id] = True
        return jsonify({'success': True, 'message': '‰∏≠Ê≠¢‰ø°Âè∑„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü'})
    return jsonify({'success': False, 'error': '‰∏≠Ê≠¢ÂèØËÉΩ„Å™„Çø„Çπ„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'})

@app.route('/api/progress')
def get_progress():
    """Server-Sent Events„ÅßÈÄ≤Êçó„ÇíÈÖç‰ø°"""
    session_id = session.get('task_id')
    if not session_id or session_id not in progress_queues:
        def error_stream():
<<<<<<< HEAD
            yield f"data: {json.dumps({'error': '„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'})}\n\n"
=======
            yield f"data: {json.dumps({'error': '„Çª„ÉÅEÇ∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'})}\n\n"
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
        response = Response(error_stream(), mimetype='text/event-stream')
        response.headers['Cache-Control'] = 'no-cache'
        response.headers['Connection'] = 'keep-alive'
        return response
    
    def event_stream():
        try:
            while True:
                try:
<<<<<<< HEAD
                    # ÈÄ≤Êçó„Éá„Éº„Çø„ÇíÂèñÂæóÔºà5Áßí„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºâ
                    progress_data = progress_queues[session_id].get(timeout=5)
                    
                    # ÈÄ≤Êçó„Éá„Éº„Çø„ÅÆÁ®ÆÈ°û„Å´Âøú„Åò„Å¶Âá¶ÁêÜ
=======
                    # ÈÄ≤Êçó„Éá„Éº„Çø„ÇíÂèñÂæóÔºÅEÁßí„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºÅE
                    progress_data = progress_queues[session_id].get(timeout=5)
                    
                    # ÈÄ≤Êçó„Éá„Éº„Çø„ÅÆÁ®ÆÈ°û„Å´Âøú„Åò„Å¶Âá¶ÁêÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
                    if 'type' in progress_data:
                        event_data = progress_data
                    else:
                        # ÈÄ≤ÊçóÊõ¥Êñ∞
                        event_data = {
                            'type': 'progress',
                            'explored_count': progress_data.get('explored_count', 0),
                            'current_moves': progress_data.get('current_moves', 0),
                            'estimated_remaining': progress_data.get('estimated_remaining', 0)
                        }
                    
                    yield f"data: {json.dumps(event_data)}\n\n"
                    
<<<<<<< HEAD
                    # ÊúÄÁµÇÁµêÊûú„ÅÆÂ†¥Âêà„ÅØÁµÇ‰∫Ü
=======
                    # ÊúÄÁµÇÁµêÊûú„ÅÆÂ†¥Âêà„ÅEÁµÇ‰∫ÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
                    if event_data.get('type') == 'final_result':
                        break
                        
                except queue.Empty:
<<<<<<< HEAD
                    # „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÊôÇ„ÅØ„Éè„Éº„Éà„Éì„Éº„Éà„ÇíÈÄÅ‰ø°
=======
                    # „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÊôÇ„ÅØ„Éè„ÅE„Éà„Éì„Éº„Éà„ÇíÈÄÅ‰ø°
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
                    if session_id in progress_queues:
                        yield f"data: {json.dumps({'type': 'heartbeat'})}\n\n"
                    else:
                        break
                    
        except Exception as e:
            yield f"data: {json.dumps({'error': str(e)})}\n\n"
        finally:
<<<<<<< HEAD
            # „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
=======
            # „ÇØ„É™„Éº„É≥„Ç¢„ÉÅEÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
            if session_id in progress_queues:
                del progress_queues[session_id]
            if session_id in stop_flags:
                del stop_flags[session_id]
    
    response = Response(event_stream(), mimetype='text/event-stream')
    response.headers['Cache-Control'] = 'no-cache'
    response.headers['Connection'] = 'keep-alive'
    return response

@app.route('/api/get_step/<int:step>')
def get_step(step):
<<<<<<< HEAD
    """ÊåáÂÆö„Åï„Çå„Åü„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó"""
    task_id = session.get('task_id')
    if not task_id or task_id not in solution_cache:
        return jsonify({'success': False, 'error': 'Ëß£„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì'})
=======
    """ÊåÅEÆö„Åï„Çå„Åü„Çπ„ÉÅEÉÉ„Éó„ÅEÁä∂ÊÖã„ÇíÂèñÂæÅE""
    task_id = session.get('task_id')
    if not task_id or task_id not in solution_cache:
        return jsonify({'success': False, 'error': 'Ëß£„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÅÅEÅæ„Åõ„Çì'})
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    
    solution_data = solution_cache[task_id]
    solution = solution_data['solution']
    
    if 0 <= step < len(solution):
        return jsonify({
            'success': True,
            'step': step,
            'board': solution[step]['board'],
            'move': solution[step]['move'],
            'total_steps': len(solution) - 1
        })
    else:
<<<<<<< HEAD
        return jsonify({'success': False, 'error': 'ÁÑ°Âäπ„Å™„Çπ„ÉÜ„ÉÉ„ÉóÁï™Âè∑„Åß„Åô'})

@app.route('/api/next_step')
def next_step():
    """Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å´ÈÄ≤„ÇÄ"""
    task_id = session.get('task_id')
    if not task_id or task_id not in solution_cache:
        return jsonify({'success': False, 'error': 'Ëß£„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì'})
=======
        return jsonify({'success': False, 'error': 'ÁÑ°Âäπ„Å™„Çπ„ÉÅEÉÉ„ÉóÁï™Âè∑„Åß„ÅÅE})

@app.route('/api/next_step')
def next_step():
    """Ê¨°„ÅÆ„Çπ„ÉÅEÉÉ„Éó„Å´ÈÄ≤„ÇÄ"""
    task_id = session.get('task_id')
    if not task_id or task_id not in solution_cache:
        return jsonify({'success': False, 'error': 'Ëß£„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÅÅEÅæ„Åõ„Çì'})
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    
    solution_data = solution_cache[task_id]
    current_step = solution_data['current_step']
    solution = solution_data['solution']
    
    if current_step < len(solution) - 1:
        current_step += 1
        solution_cache[task_id]['current_step'] = current_step
        
        return jsonify({
            'success': True,
            'step': current_step,
            'board': solution[current_step]['board'],
            'move': solution[current_step]['move'],
            'total_steps': len(solution) - 1,
            'is_final': current_step == len(solution) - 1
        })
    else:
        return jsonify({
            'success': False, 
<<<<<<< HEAD
            'error': 'ÊúÄÁµÇ„Çπ„ÉÜ„ÉÉ„Éó„Å´Âà∞ÈÅî„Åó„Å¶„ÅÑ„Åæ„Åô',
=======
            'error': 'ÊúÄÁµÇ„Çπ„ÉÅEÉÉ„Éó„Å´Âà∞ÈÅî„Åó„Å¶„ÅÅEÅæ„ÅÅE,
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
            'is_final': True
        })

@app.route('/api/prev_step')
def prev_step():
<<<<<<< HEAD
    """Ââç„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å´Êàª„Çã"""
    task_id = session.get('task_id')
    if not task_id or task_id not in solution_cache:
        return jsonify({'success': False, 'error': 'Ëß£„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì'})
=======
    """Ââç„ÅE„Çπ„ÉÅEÉÉ„Éó„Å´Êàª„ÇÅE""
    task_id = session.get('task_id')
    if not task_id or task_id not in solution_cache:
        return jsonify({'success': False, 'error': 'Ëß£„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÅÅEÅæ„Åõ„Çì'})
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    
    solution_data = solution_cache[task_id]
    current_step = solution_data['current_step']
    solution = solution_data['solution']
    
    if current_step > 0:
        current_step -= 1
        solution_cache[task_id]['current_step'] = current_step
        
        return jsonify({
            'success': True,
            'step': current_step,
            'board': solution[current_step]['board'],
<<<<<<< HEAD
            'move': solution[current_step]['move'] if current_step > 0 else 'ÂàùÊúüÁä∂ÊÖã',
=======
            'move': solution[current_step]['move'] if current_step > 0 else 'ÂàùÊúüÁä∂ÊÖÅE,
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
            'total_steps': len(solution) - 1,
            'is_final': False
        })
    else:
        return jsonify({
            'success': False, 
<<<<<<< HEAD
            'error': 'ÂàùÊúü„Çπ„ÉÜ„ÉÉ„Éó„Åß„Åô'
=======
            'error': 'ÂàùÊúü„Çπ„ÉÅEÉÉ„Éó„Åß„ÅÅE
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
        })

@app.route('/api/reset')
def reset_puzzle():
<<<<<<< HEAD
    """„Éë„Ç∫„É´„Çí„É™„Çª„ÉÉ„Éà"""
    task_id = session.get('task_id')
    # ÈÄ≤Êçó„Ç≠„É•„Éº„Å®„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢
=======
    """„Éë„Ç∫„É´„Çí„É™„Çª„ÉÅEÉà"""
    task_id = session.get('task_id')
    # ÈÄ≤Êçó„Ç≠„É•„Éº„Å®„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„Ç≠„É£„ÉÅEÇ∑„É•„Çí„ÇØ„É™„Ç¢
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    if task_id:
        if task_id in progress_queues:
            del progress_queues[task_id]
        if task_id in solution_cache:
            del solution_cache[task_id]
        if task_id in stop_flags:
            del stop_flags[task_id]
    session.clear()
    return jsonify({'success': True})

@app.route('/api/validate_board', methods=['POST'])
def validate_board():
<<<<<<< HEAD
    """Áõ§Èù¢„ÅÆÂ¶•ÂΩìÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ"""
=======
    """Áõ§Èù¢„ÅÆÂ¶•ÂΩìÊÄß„Çí„ÉÅ„Çß„ÉÅEÇØ"""
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    data = request.get_json()
    board = data.get('board')
    
    if not board or len(board) != 5 or any(len(row) != 4 for row in board):
        return jsonify({'success': False, 'error': 'Áõ§Èù¢„ÅÆ„Çµ„Ç§„Ç∫„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì'})
    
<<<<<<< HEAD
    # ÂøÖË¶Å„Å™„Éî„Éº„Çπ„Åå„Åô„Åπ„Å¶Â≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
=======
    # ÂøÅE¶Å„Å™„Éî„ÅE„Çπ„Åå„Åô„Åπ„Å¶Â≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÅEÇØ
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    pieces_count = {}
    for row in board:
        for cell in row:
            pieces_count[cell] = pieces_count.get(cell, 0) + 1
    
<<<<<<< HEAD
    # ÁÆ±ÂÖ•„ÇäÂ®ò(MP)„Åå4„Éû„ÇπÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if pieces_count.get(1, 0) != 4:  # MP = 1
        return jsonify({'success': False, 'error': 'ÁÆ±ÂÖ•„ÇäÂ®ò(MP)„ÅåÊ≠£„Åó„ÅèÈÖçÁΩÆ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'})
=======
    # ÁÆ±ÂÖ•„ÇäÂ®ÅEMP)„ÅÅE„Éû„ÇπÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÅEÇØ
    if pieces_count.get(1, 0) != 4:  # MP = 1
        return jsonify({'success': False, 'error': 'ÁÆ±ÂÖ•„ÇäÂ®ÅEMP)„ÅåÊ≠£„Åó„ÅèÈÖçÁΩÆ„Åï„Çå„Å¶„ÅÅEÅæ„Åõ„Çì'})
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
    
    return jsonify({'success': True})

if __name__ == '__main__':
<<<<<<< HEAD
    app.run(debug=True, port=5000)
=======
    app.run(debug=True, port=5000)
>>>>>>> 9614f998bb362e5174d410cd7269833c1dede4bd
